# [PackageDev] target_format: plist, ext: tmLanguage
---
name: EdgeDBSchema
scopeName: source.edgeschema
fileTypes: ['eschema']
uuid: a560aad6-9c13-49c5-a369-5fb272c8ec1a

patterns:
  - include: '#all'

repository:
  all:
    patterns:
      - include: '#comments'
      - include: '#import-parentheses'
      - include: '#keywords'
      - include: '#attributes'
      - include: '#operators'
      - include: '#names'
      - include: '#eql-parentheses'
      - include: '#eql-to-logical-eol'

  comments:
    patterns:
    - name: comment.line.number-sign.edgeschema
      match: (#)\s*((BUG|FIXME|TODO|XXX)).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.edgeschema}
        '2': {name: comment.line.note.notation.edgeschema}
        '3': {name: comment.line.note.edgeschema}
    - name: comment.line.number-sign.edgeschema
      match: (#).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.edgeschema}

  keywords:
    patterns:
    - name: support.type.abstract.edgeschema
      match: (?i)\b(abstract|final)\b

    - name: support.type.required.edgeschema
      match: (?i)\b(required)\b

    - name: keyword.operator.edgeschema
      match: (?i)\b(as|import|on|to)\b

    - name: constant.language.boolean.true.edgeschema
      match: (?i)\b(true)\b

    - name: constant.language.boolean.false.edgeschema
      match: (?i)\b(false)\b

    - name: keyword.other.declaration.edgeschema
      match: |
        (?ix) \b(
          (?# unreserved)
          abstract | as | attribute | constraint | default |
          deferred | delegated | final | from | index | inherited |
          link | multi | of | on | property | required | restrict |
          scalar | single | source | target | type | view |

          (?# from EdgeQL)
          (?# reserved)
          all | alter | analyze | and | anytype | begin | case |
          commit | create | deallocate | declare | delete |
          detached | discard | distinct | do | drop | else | end |
          execute | exists | explain | extending | fetch | filter |
          for | function | get | global | grant | group | if |
          ilike | import | in | insert | introspect | is | like |
          limit | listen | load | lock | match | module | move |
          not | notify | offset | optional | or | order | over |
          partition | prepare | refresh | reindex | reset |
          revoke | rollback | savepoint | select | set | start |
          typeof | union | update | variadic | when | with
        )\b

  attributes:
    name: meta.attribute.edgeschema
    match: |
      (?x)
        ^\s+
          ([[:alpha:]_][[:alnum:]_]*)
            (?=\s*:=)
    captures:
      '1': {name: variable.parameter.attribute.edgeschema}

  operators:
    patterns:
    - name: keyword.operator.namespace.edgeschema
      match: (::)
    - name: keyword.declaration.edgeschema
      match: (->)
    - name: keyword.declaration.edgeschema
      match: (:=)

  names:
    patterns:
    - name: support.function.builtin.edgeschema
      match: |
        (?x) \b(?<!\.) (
          len |
          array_agg | array_contains | array_enumerate | array_unpack |
          lower |
          re_match | re_match_all | re_test |
          count | sum |
          datetime_now |
          datetime_get | time_get | date_get | timedelta_get |
          random | uuid_generate_v1mc
        )(?=\s*\()\b

    - name: support.function.constraint.builtin.edgeschema
      match: |
        (?x) \b(?<!\.) (
          constraint | max | enum | expression | min | minexclusive |
          length | minlength | regexp | maxlength | maxexclusive | unique
        )\b

    - name: support.other.module.builtin.edgeschema
      match: |
        (?x) \b(?<!::|\.)(
          std | stdattrs | schema
        )\b

    - name: support.type.builtin.edgeschema
      match: |
        (?x) \b(
          array | map | tuple |

          any | anyreal | anyint | anyfloat | auto |
          bytes |
          datetime |
          naivedatetime | naivedate | naivetime |
          timedelta |
          uuid |
          str |
          json |
          int16 | int32 | int64 |
          float32 | float64 | decimal |
          bool
        )\b

    - include: '#quoted-name'

  quoted-name:
    name: string.interpolated.edgeschema
    match: (`.*?`)

  import-parentheses:
    begin: (?i)(?<=import)\s*(\()
    end: (\))
    beginCaptures:
      '1': {name: punctuation.parenthesis.begin.edgeschema}
    endCaptures:
      '1': {name: punctuation.parenthesis.end.edgeschema}
    patterns:
      - include: '#comments'
      - include: '#keywords'
      - include: '#names'

  eql-parentheses:
    begin: (\()
    end: (\))
    beginCaptures:
      '1': {name: punctuation.parenthesis.begin.edgeschema}
    endCaptures:
      '1': {name: punctuation.parenthesis.end.edgeschema}
    patterns:
      - include: 'source.edgeql'

  eql-to-logical-eol:
    patterns:
      - begin: (?i)(?<=->|to|extending)\s*(?!\()
        end: (?=$)|(?<!:)(?=:(?!:))
        patterns:
          - include: 'source.edgeql'

      # same-line := expression
      - begin: (?<=:=)\s*(?=\S.*$)
        end: (\s*$\n)
        patterns:
          - include: 'source.edgeql'

      # multi-line := expression
      - begin: (?<=:=)\s*$\n
        end: (\s*$\n)
        patterns:
          - include: 'source.edgeql'
...
