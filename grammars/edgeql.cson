# AUTOGENERATED FROM grammars/src/edgeql.syntax.yaml
name: "EdgeQL"
scopeName: "source.edgeql"
fileTypes: [
  "edgeql"
  "esdl"
]
uuid: "a560aad6-9c13-49c5-a369-5fb272c8ec1a"
patterns: [
  {
    include: "#all"
  }
]
repository:
  all:
    patterns: [
      {
        include: "#fnstatement"
      }
      {
        include: "#expressions"
      }
      {
        name: "punctuation.statement.delimiter.edgeql"
        match: "(;)"
      }
    ]
  expressions:
    patterns: [
      {
        include: "#comments"
      }
      {
        include: "#code"
      }
      {
        include: "#keywords"
      }
      {
        include: "#fncalls"
      }
      {
        include: "#operators"
      }
      {
        include: "#builtins"
      }
      {
        include: "#types"
      }
      {
        include: "#quoted-name"
      }
      {
        include: "#values"
      }
      {
        include: "#link-properties"
      }
      {
        include: "#variables"
      }
      {
        include: "#parentheses"
      }
      {
        include: "#squarebraces"
      }
      {
        include: "#curlybraces"
      }
      {
        include: "#casts"
      }
    ]
  code:
    patterns: [
      {
        match: '''
          (?xi)
            \\b(FROM) \\s+ (EDGEQL | SQL) \\s+ (EXPRESSION)
          
        '''
        captures:
          "1":
            name: "keyword.declaration.edgeql"
          "3":
            name: "keyword.declaration.edgeql"
      }
      {
        begin: '''
          (?xi)
            \\b(FROM) \\s+
            (SQL) \\s+
            (\\$\\w?\\$)
          
        '''
        end: "(\\3)"
        beginCaptures:
          "1":
            name: "keyword.declaration.edgeql"
          "3":
            name: "string.quoted.edgeql"
        endCaptures:
          "1":
            name: "string.quoted.edgeql"
        patterns: [
          {
            include: "source.sql"
          }
        ]
      }
      {
        begin: '''
          (?xi)
            \\b(FROM) \\s+
            (EDGEQL) \\s+
            (\\$\\w?\\$)
          
        '''
        end: "(\\3)"
        beginCaptures:
          "1":
            name: "keyword.declaration.edgeql"
          "3":
            name: "string.quoted.edgeql"
        endCaptures:
          "1":
            name: "string.quoted.edgeql"
        patterns: [
          {
            include: "source.edgeql"
          }
        ]
      }
    ]
  fnstatement:
    begin: "(?ix) \\b(?<![:\\.])(FUNCTION|AGGREGATE|ABSTRACT CONSTRAINT)\\b"
    end: "(?=[^\\s\\w:]|\\bEXTENDING\\b|$)"
    beginCaptures:
      "1":
        name: "keyword.declaration.edgeql"
    patterns: [
      {
        include: "#builtins"
      }
      {
        include: "#identifier"
      }
      {
        name: "keyword.operator.namespace.edgeql"
        match: "(::)"
      }
    ]
  fncallargs:
    patterns: [
      {
        include: "#definition"
      }
      {
        include: "#expressions"
      }
      {
        name: "punctuation.separator.arguments.edgeql"
        match: "(,)"
      }
      {
        name: "invalid.illegal.delimiter.edgeql"
        match: "(;)"
      }
    ]
  definition:
    match: '''
      (?x)
        (?:
          ([[:alpha:]_][[:alnum:]_]*)
          |
          ([\\.\\d]\\S*?)
        ) (?=\\s*:=)
      
    '''
    captures:
      "1":
        name: "variable.parameter.definition.edgeql"
      "2":
        name: "invalid.illegal.definition.edgeql"
  parencommon:
    patterns: [
      {
        name: "punctuation.separator.element.edgeql"
        match: "(,)"
      }
      {
        name: "invalid.illegal.delimiter.edgeql"
        match: "(;)"
      }
    ]
  parentheses:
    begin: "(\\()"
    end: "(\\))"
    beginCaptures:
      "1":
        name: "punctuation.parenthesis.begin.edgeql"
    endCaptures:
      "1":
        name: "punctuation.parenthesis.end.edgeql"
    patterns: [
      {
        include: "#expressions"
      }
      {
        include: "#parencommon"
      }
    ]
  squarebraces:
    begin: "(\\[)"
    end: "(\\])"
    beginCaptures:
      "1":
        name: "punctuation.parenthesis.begin.edgeql"
    endCaptures:
      "1":
        name: "punctuation.parenthesis.end.edgeql"
    patterns: [
      {
        name: "keyword.operator.edgeql"
        match: "(^|\\b|\\s)(->)($|\\b|\\s)"
      }
      {
        include: "#expressions"
      }
      {
        include: "#parencommon"
      }
    ]
  curlybraces:
    begin: "(\\{)"
    end: "(\\})"
    beginCaptures:
      "1":
        name: "punctuation.parenthesis.begin.edgeql"
    endCaptures:
      "1":
        name: "punctuation.parenthesis.end.edgeql"
    patterns: [
      {
        include: "#comments"
      }
      {
        include: "#commandblock"
      }
      {
        include: "#shape"
      }
    ]
  commandblock:
    begin: "(?=SET|CREATE|ALTER|DROP|RENAME|FROM)"
    end: "(?=\\})"
    patterns: [
      {
        include: "#all"
      }
    ]
  shape:
    begin: "(?=\\S)"
    end: "(?=\\})"
    patterns: [
      {
        name: "punctuation.statement.delimiter.edgeql"
        match: "(;)"
      }
      {
        include: "#expressions"
      }
      {
        include: "#parencommon"
      }
    ]
  comments:
    patterns: [
      {
        name: "comment.line.number-sign.edgeql"
        match: "(#)\\s*((BUG|FIXME|TODO|XXX)).*$\\n?"
        captures:
          "1":
            name: "punctuation.definition.comment.edgeql"
          "2":
            name: "comment.line.note.notation.edgeql"
          "3":
            name: "comment.line.note.edgeql"
      }
      {
        name: "comment.line.number-sign.edgeql"
        match: "(#).*$\\n?"
        captures:
          "1":
            name: "punctuation.definition.comment.edgeql"
      }
    ]
  keywords:
    patterns: [
      {
        name: "constant.language.boolean.true.edgeql"
        match: "(?i)\\b(TRUE)\\b"
      }
      {
        name: "constant.language.boolean.false.edgeql"
        match: "(?i)\\b(FALSE)\\b"
      }
      {
        name: "constant.language.empty.edgeql"
        match: "(?i)\\b(EMPTY)\\b"
      }
      {
        name: "keyword.declaration.edgeql"
        match: "(?i)\\b(?<!::|\\.|\\.<|\\.>)(CONSTRAINT)\\b(?!=\\s+\\()"
      }
      {
        name: "keyword.declaration.edgeql"
        match: '''
          (?ix) \\b(?<!::|\\.|\\.<|\\.>)(
          
            (?# unreserved)
            abstract | after | alias | all | allow | 
            as | asc | assignment | attribute | before | 
            by | cardinality | cast | committed | config | 
            database | default | deferrable | deferred | delegated | 
            desc | explicit | final | first | from | 
            implicit | index | infix | inheritable | inherited | 
            into | isolation | last | link | migration | 
            multi | named | of | on | only | 
            operator | postfix | prefix | property | read | 
            rename | repeatable | required | restrict | role | 
            savepoint | scalar | serializable | session | single | 
            source | system | target | ternary | then | 
            to | transaction | type | using | view | 
            write 
            |
            (?# reserved)
            alter | analyze | and | anyarray | anytuple | 
            begin | case | commit | configure | create | 
            deallocate | declare | delete | detached | discard | 
            distinct | do | drop | else | empty | 
            end | execute | exists | explain | extending | 
            fetch | filter | for | function | get | 
            global | grant | group | if | ilike | 
            import | in | insert | introspect | is | 
            like | limit | listen | load | lock | 
            match | module | move | not | notify | 
            offset | optional | or | order | over | 
            partition | prepare | raise | refresh | reindex | 
            release | reset | revoke | rollback | select | 
            set | start | typeof | union | update | 
            variadic | when | with 
          )\\b
          
        '''
      }
    ]
  operators:
    patterns: [
      {
        name: "keyword.operator.navigation.edgeql"
        match: "(\\.[<>])"
      }
      {
        name: "keyword.operator.namespace.edgeql"
        match: "(::)"
      }
      {
        name: "keyword.declaration.edgeql"
        match: "->"
      }
      {
        name: "keyword.operator.edgeql"
        match: '''
          (?x)
            \\?\\!\\= | \\?\\? | \\?\\= | \\>\\= | \\<\\= | \\:\\= | \\/\\/ | \\+\\+ | 
            \\!\\= | \\^ | \\> | \\= | \\< | \\/ | \\- | \\+ | 
            \\* | \\% 
          
        '''
      }
    ]
  types:
    patterns: [
      {
        begin: "\\b(?<!::|\\.)(tuple)\\s*(<)"
        end: "(>)"
        beginCaptures:
          "1":
            name: "storage.type.edgeql"
          "2":
            name: "storage.type.placeholder.begin.edgeql"
        endCaptures:
          "1":
            name: "storage.type.placeholder.end.edgeql"
        patterns: [
          {
            include: "#types"
          }
          {
            name: "punctuation.separator.type.edgeql"
            match: "(,)"
          }
          {
            match: "(:)"
          }
          {
            include: "#types-common"
          }
        ]
      }
      {
        begin: "\\b(?<!::|\\.)(array)\\s*(<)"
        end: "(>)"
        beginCaptures:
          "1":
            name: "storage.type.edgeql"
          "2":
            name: "storage.type.placeholder.begin.edgeql"
        endCaptures:
          "1":
            name: "storage.type.placeholder.end.edgeql"
        patterns: [
          {
            name: "invalid.illegal.type.edgeql"
            match: "array"
          }
          {
            include: "#types"
          }
          {
            include: "#array-dimensions"
          }
          {
            include: "#types-common"
          }
        ]
      }
      {
        name: "storage.type.edgeql"
        match: '''
          (?x) \\b(?<!::|\\.)(
            array | tuple
          )\\b
          
        '''
      }
      {
        include: "#builtin-modules"
      }
      {
        include: "#builtin-types"
      }
    ]
  "types-common":
    patterns: [
      {
        include: "#identifier"
      }
      {
        name: "keyword.operator.namespace.edgeql"
        match: "(::)"
      }
    ]
  "array-dimensions":
    begin: "(\\[)"
    end: "(\\])"
    beginCaptures:
      "1":
        name: "punctuation.parenthesis.begin.edgeql"
    endCaptures:
      "1":
        name: "punctuation.parenthesis.end.edgeql"
    patterns: [
      {
        name: "constant.numeric.edgeql"
        match: "(\\d+)"
      }
      {
        name: "invalid.illegal.type.edgeql"
        match: "\\S+"
      }
    ]
  variables:
    name: "constant.language.variable.edgeql"
    begin: "(\\$)(?=[[:alnum:]_]|`)"
    end: "(?<=[[:alnum:]_`])"
    patterns: [
      {
        include: "#identifier"
      }
      {
        include: "#quoted-name"
      }
      {
        match: "(\\d)+"
      }
    ]
  "link-properties":
    name: "support.other.linkproperty.edgeql"
    begin: "(\\@)"
    end: "(?<=[[:alnum:]_`])"
    patterns: [
      {
        include: "#identifier"
      }
      {
        include: "#quoted-name"
      }
    ]
  identifier:
    match: "([[:alpha:]_][[:alnum:]_]*)"
  "quoted-name":
    name: "string.interpolated.edgeql"
    match: "(`.*?`)"
  values:
    patterns: [
      {
        include: "#number"
      }
      {
        include: "#bytes"
      }
      {
        include: "#string"
      }
    ]
  number:
    patterns: [
      {
        name: "constant.numeric.float.edgeql"
        match: '''
          (?x)
            (?:
              #decimal part
              \\.(_*)(?:[0-9](?:[0-9_]*[0-9])?)
              |
              # integer part
              \\b(?: [1-9](?: [0-9_]*[0-9] )? | 0 )
                (?:\\.(_*)[0-9](?:[0-9_]*[0-9])?)
            )
            ((_*)([eE][\\+\\-]?)(_*)[0-9](?:[0-9_]*[0-9])?)?
          
            (_*)
            \\b
          
        '''
        captures:
          "1":
            name: "invalid.illegal.dec.edgeql"
          "2":
            name: "invalid.illegal.dec.edgeql"
          "4":
            name: "invalid.illegal.dec.edgeql"
          "5":
            name: "storage.type.number.edgeql"
          "6":
            name: "invalid.illegal.dec.edgeql"
          "7":
            name: "invalid.illegal.dec.edgeql"
      }
      {
        name: "constant.numeric.float.edgeql"
        match: '''
          (?x)
            (?:
              # integer part
              \\b(?:[1-9](?:[0-9_]*[0-9])?|0)
            )
            ((_*)([eE][\\+\\-]?)(_*)[0-9](?:[0-9_]*[0-9])?)
          
            (_*)
            \\b
          
        '''
        captures:
          "2":
            name: "invalid.illegal.dec.edgeql"
          "3":
            name: "storage.type.number.edgeql"
          "4":
            name: "invalid.illegal.dec.edgeql"
          "5":
            name: "invalid.illegal.dec.edgeql"
      }
      {
        name: "constant.numeric.decimal.edgeql"
        match: '''
          (?x)
            (?:
              #decimal part
              \\.(_*)(?:[0-9](?:[0-9_]*[0-9])?)
              |
              # integer part
              \\b(?:[1-9](?:[0-9_]*[0-9])?|0)
                (?:\\.(_*)[0-9](?:[0-9_]*[0-9])?)?
            )
            ((_*)([eE][\\+\\-]?)(_*)[0-9](?:[0-9_]*[0-9])?)?
          
            (_*)
            (n)
          
        '''
        captures:
          "1":
            name: "invalid.illegal.dec.edgeql"
          "2":
            name: "invalid.illegal.dec.edgeql"
          "4":
            name: "invalid.illegal.dec.edgeql"
          "5":
            name: "storage.type.number.edgeql"
          "6":
            name: "invalid.illegal.dec.edgeql"
          "7":
            name: "invalid.illegal.dec.edgeql"
          "8":
            name: "storage.type.number.edgeql"
      }
      {
        name: "constant.numeric.integer.edgeql"
        match: '''
          (?x)
            (?:
              # integer part
              \\b(?:[1-9](?:[0-9_]*[0-9])?|0)
            )
            (_*)
            \\b
          
        '''
        captures:
          "1":
            name: "invalid.illegal.dec.edgeql"
          "2":
            name: "invalid.illegal.dec.edgeql"
      }
    ]
  string:
    patterns: [
      {
        name: "string.quoted.raw.edgeql"
        begin: "(r)(['\"])"
        end: "(\\2)"
        beginCaptures:
          "1":
            name: "storage.type.string.edgeql"
          "2":
            name: "punctuation.definition.string.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.edgeql"
      }
      {
        name: "string.quoted.edgeql"
        begin: "(['\"])"
        end: "(\\1)"
        beginCaptures:
          "1":
            name: "punctuation.definition.string.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.edgeql"
        patterns: [
          {
            include: "#string-escapes"
          }
          {
            include: "#string-invalid-escapes"
          }
        ]
      }
      {
        name: "string.dollar.edgeql"
        begin: "(\\$([[:alpha:]_][[:alnum:]]*)*\\$)"
        end: "(\\1)"
        beginCaptures:
          "1":
            name: "punctuation.definition.string.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.edgeql"
      }
    ]
  "string-escapes":
    name: "constant.character.escape.edgeql"
    match: '''
      (?x)
        (
          \\\\(?=\\s*\\n) |
          \\\\[\\\\'"bfnrt] |
          \\\\x[0-7][0-9a-fA-F] |
          \\\\u[0-9a-fA-F]{4} |
          \\\\U[0-9a-fA-F]{8}
        )
      
    '''
  "string-invalid-escapes":
    name: "invalid.illegal.escapes.edgeql"
    match: "(\\\\.)"
  bytes:
    patterns: [
      {
        name: "string.quoted.bytes.edgeql"
        begin: "(b)(')"
        end: "(\\2)"
        beginCaptures:
          "1":
            name: "storage.type.string.edgeql"
          "2":
            name: "punctuation.definition.string.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.edgeql"
        patterns: [
          {
            include: "#bytes-escapes"
          }
          {
            match: "([\\n -&(-\\[\\]-~])+"
          }
          {
            name: "invalid.illegal.bytes.edgeql"
            match: "(\\\\x.{1,2})|(\\\\.)|(.)"
          }
        ]
      }
      {
        name: "string.quoted.bytes.edgeql"
        begin: "(b)(\")"
        end: "(\\2)"
        beginCaptures:
          "1":
            name: "storage.type.string.edgeql"
          "2":
            name: "punctuation.definition.string.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.edgeql"
        patterns: [
          {
            include: "#bytes-escapes"
          }
          {
            match: "([\\n -!#-\\[\\]-~])+"
          }
          {
            name: "invalid.illegal.bytes.edgeql"
            match: "(\\\\x.{1,2})|(\\\\.)|(.)"
          }
        ]
      }
    ]
  "bytes-escapes":
    name: "constant.character.escape.edgeql"
    match: '''
      (?x)
        (
          \\\\[\\\\'"bfnrt] |
          \\\\x[0-9a-fA-F]{2}
        )
      
    '''
  casts:
    begin: '''
      (?xi)
        (?:
          (?<= ^ | [@~+\\-*/%^<>=?,:(\\[{])
          |
          (?<=
            AND | OR | NOT | LIKE | ILIKE | IS | IN | IF | ELSE |
            UNION | ALL | EXISTS |
      
            SELECT | GROUP | UPDATE | BY | THEN | LIMIT |
            # there are some ligature-related issues with "fi" and "ff"
            F[Ii]LTER | OF[Ff]SET
          )
        ) \\s* (\\<)
      
    '''
    end: "(\\>)"
    beginCaptures:
      "1":
        name: "keyword.operator.cast.begin.edgeql"
    endCaptures:
      "1":
        name: "keyword.operator.cast.end.edgeql"
    contentName: "meta.typecast.edgeql"
    patterns: [
      {
        include: "#types"
      }
      {
        include: "#types-common"
      }
    ]
  fncalls:
    patterns: [
      {
        name: "meta.function-call.edgeql"
        begin: '''
          (?x)
            \\b(?<!\\.|\\.<|\\.>)
            # function name
            (?:
              (
                # functions
                abs | advisory_lock | advisory_unlock | 
                advisory_unlock_all | all | any | 
                array_agg | array_get | array_unpack | 
                bytes_get_bit | ceil | contains | 
                count | date_get | datetime_current | 
                datetime_get | datetime_of_statement | datetime_of_transaction | 
                datetime_trunc | enumerate | find | 
                floor | json_array_unpack | json_get | 
                json_object_unpack | json_typeof | len | 
                lg | ln | log | 
                max | mean | min | 
                random | re_match | re_match_all | 
                re_replace | re_test | round | 
                sleep | stddev | stddev_pop | 
                str_lower | str_lpad | str_ltrim | 
                str_repeat | str_rpad | str_rtrim | 
                str_title | str_trim | str_upper | 
                sum | time_get | timedelta_get | 
                timedelta_trunc | to_datetime | to_decimal | 
                to_float32 | to_float64 | to_int16 | 
                to_int32 | to_int64 | to_json | 
                to_naive_date | to_naive_datetime | to_naive_time | 
                to_str | to_timedelta | uuid_generate_v1mc | 
                var | var_pop 
              |
                # constraints
                constraint | enum | exclusive | 
                expression | len_constraint | max | 
                max_ex | max_len | min | 
                min_ex | min_len | regexp 
              )
              |
              ([[:alpha:]_][[:alnum:]_]*)
              |
              (`.*?`)
            ) \\s*(\\()
          
        '''
        end: "(\\))"
        beginCaptures:
          "1":
            name: "support.function.builtin.edgeql"
          "2":
            name: "entity.name.function.edgeql"
          "3":
            name: "string.interpolated.edgeql"
          "4":
            name: "punctuation.definition.arguments.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.arguments.end.edgeql"
        patterns: [
          {
            include: "#fncallargs"
          }
        ]
      }
      {
        name: "meta.function-call.edgeql"
        begin: '''
          (?x)
            \\b(?<!\\.|\\.<|\\.>)
            # module
            (?:
              (
                cfg | math | schema | 
                std | stdgraphql | sys 
              )
              |
              (?# masking built-ins in odd ways)
              (
                #functions
                abs | advisory_lock | advisory_unlock | 
                advisory_unlock_all | all | any | 
                array_agg | array_get | array_unpack | 
                bytes_get_bit | ceil | contains | 
                count | date_get | datetime_current | 
                datetime_get | datetime_of_statement | datetime_of_transaction | 
                datetime_trunc | enumerate | find | 
                floor | json_array_unpack | json_get | 
                json_object_unpack | json_typeof | len | 
                lg | ln | log | 
                max | mean | min | 
                random | re_match | re_match_all | 
                re_replace | re_test | round | 
                sleep | stddev | stddev_pop | 
                str_lower | str_lpad | str_ltrim | 
                str_repeat | str_rpad | str_rtrim | 
                str_title | str_trim | str_upper | 
                sum | time_get | timedelta_get | 
                timedelta_trunc | to_datetime | to_decimal | 
                to_float32 | to_float64 | to_int16 | 
                to_int32 | to_int64 | to_json | 
                to_naive_date | to_naive_datetime | to_naive_time | 
                to_str | to_timedelta | uuid_generate_v1mc | 
                var | var_pop 
                |
                #constraints
                constraint | enum | exclusive | 
                expression | len_constraint | max | 
                max_ex | max_len | min | 
                min_ex | min_len | regexp 
              )
              |
              ([[:alpha:]_][[:alnum:]_]*)
              |
              (`.*?`)
            )
          
            \\s*(::)\\s*
          
            # function name
            (?:
              (
                #functions
                abs | advisory_lock | advisory_unlock | 
                advisory_unlock_all | all | any | 
                array_agg | array_get | array_unpack | 
                bytes_get_bit | ceil | contains | 
                count | date_get | datetime_current | 
                datetime_get | datetime_of_statement | datetime_of_transaction | 
                datetime_trunc | enumerate | find | 
                floor | json_array_unpack | json_get | 
                json_object_unpack | json_typeof | len | 
                lg | ln | log | 
                max | mean | min | 
                random | re_match | re_match_all | 
                re_replace | re_test | round | 
                sleep | stddev | stddev_pop | 
                str_lower | str_lpad | str_ltrim | 
                str_repeat | str_rpad | str_rtrim | 
                str_title | str_trim | str_upper | 
                sum | time_get | timedelta_get | 
                timedelta_trunc | to_datetime | to_decimal | 
                to_float32 | to_float64 | to_int16 | 
                to_int32 | to_int64 | to_json | 
                to_naive_date | to_naive_datetime | to_naive_time | 
                to_str | to_timedelta | uuid_generate_v1mc | 
                var | var_pop 
                |
                #constraints
                constraint | enum | exclusive | 
                expression | len_constraint | max | 
                max_ex | max_len | min | 
                min_ex | min_len | regexp 
              )
              |
              ([[:alpha:]_][[:alnum:]_]*)
              |
              (`.*?`)
            ) \\s*(\\()
          
        '''
        end: "(\\))"
        beginCaptures:
          "1":
            name: "support.other.module.builtin.edgeql"
          "2":
            name: "support.function.builtin.edgeql"
          "3":
            name: "entity.name.function.edgeql"
          "4":
            name: "string.interpolated.edgeql"
          "5":
            name: "keyword.operator.namespace.edgeql"
          "6":
            name: "support.function.builtin.edgeql"
          "7":
            name: "entity.name.function.edgeql"
          "8":
            name: "string.interpolated.edgeql"
          "9":
            name: "punctuation.definition.arguments.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.arguments.end.edgeql"
        patterns: [
          {
            include: "#fncallargs"
          }
        ]
      }
    ]
  "builtin-modules":
    name: "support.other.module.builtin.edgeql"
    match: '''
      (?x) \\b(?<!::|\\.|\\.<|\\.>)(
        cfg | math | schema | std | 
        stdgraphql | sys 
      )\\b
      
    '''
  "builtin-types":
    name: "support.type.builtin.edgeql"
    match: '''
      (?x) \\b(?<!\\.|\\.<|\\.>) (
        Object | anyfloat | anyint | anyreal | 
        anyscalar | anytype | array | bool | 
        bytes | datetime | decimal | float32 | 
        float64 | int16 | int32 | int64 | 
        json | naive_date | naive_datetime | naive_time | 
        sequence | str | timedelta | tuple | 
        uuid 
      )\\b
      
    '''
  builtins:
    patterns: [
      {
        name: "support.function.builtin.edgeql"
        match: '''
          (?x) \\b(?<!\\.|\\.<|\\.>) (
            abs | advisory_lock | advisory_unlock | 
            advisory_unlock_all | all | any | 
            array_agg | array_get | array_unpack | 
            bytes_get_bit | ceil | contains | 
            count | date_get | datetime_current | 
            datetime_get | datetime_of_statement | datetime_of_transaction | 
            datetime_trunc | enumerate | find | 
            floor | json_array_unpack | json_get | 
            json_object_unpack | json_typeof | len | 
            lg | ln | log | 
            max | mean | min | 
            random | re_match | re_match_all | 
            re_replace | re_test | round | 
            sleep | stddev | stddev_pop | 
            str_lower | str_lpad | str_ltrim | 
            str_repeat | str_rpad | str_rtrim | 
            str_title | str_trim | str_upper | 
            sum | time_get | timedelta_get | 
            timedelta_trunc | to_datetime | to_decimal | 
            to_float32 | to_float64 | to_int16 | 
            to_int32 | to_int64 | to_json | 
            to_naive_date | to_naive_datetime | to_naive_time | 
            to_str | to_timedelta | uuid_generate_v1mc | 
            var | var_pop 
          )(?=\\s*\\()\\b
          
        '''
      }
      {
        name: "support.function.constraint.builtin.edgeql"
        match: '''
          (?x) \\b(?<!\\.|\\.<|\\.>) (
            constraint | enum | exclusive | 
            expression | len_constraint | max | 
            max_ex | max_len | min | 
            min_ex | min_len | regexp 
          )\\b
          
        '''
      }
      {
        include: "#builtin-modules"
      }
      {
        name: "support.other.link.builtin.edgeql"
        match: '''
          (?x) \\b(
            __source__ | __subject__ | __type__ 
          )\\b
          
        '''
      }
    ]
