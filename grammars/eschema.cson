# AUTOGENERATED FROM grammars/eschema.syntax.yaml
name: "EdgeDBSchema"
scopeName: "source.edgeschema"
fileTypes: [
  "eschema"
]
uuid: "a560aad6-9c13-49c5-a369-5fb272c8ec1a"
patterns: [
  {
    include: "#all"
  }
]
repository:
  all:
    patterns: [
      {
        include: "#comments"
      }
      {
        include: "#import-parentheses"
      }
      {
        include: "#keywords"
      }
      {
        include: "#attributes"
      }
      {
        include: "#operators"
      }
      {
        include: "#names"
      }
      {
        include: "#eql-parentheses"
      }
      {
        include: "#eql-to-logical-eol"
      }
    ]
  comments:
    patterns: [
      {
        name: "comment.line.note.edgeschema"
        match: "(#)\\s*(BUG|FIXME|TODO|XXX).*$\\n?"
        captures:
          "1":
            name: "punctuation.definition.comment.edgeschema"
          "2":
            name: "comment.line.note.notation.edgeschema"
      }
      {
        name: "comment.line.number-sign.edgeschema"
        match: "(#).*$\\n?"
        captures:
          "1":
            name: "punctuation.definition.comment.edgeschema"
      }
    ]
  keywords:
    patterns: [
      {
        name: "support.type.abstract.edgeschema"
        match: "(?i)\\b(abstract|final)\\b"
      }
      {
        name: "support.type.required.edgeschema"
        match: "(?i)\\b(required)\\b"
      }
      {
        name: "keyword.other.declaration.edgeschema"
        match: '''
          (?ix) \\b(
            (?# from EdgeQL)
            action | after | asc |
            attribute | before | by | cardinality |
            constraint | database | delegated | desc |
            event | first | from | index | initial |
            into | last | link | migration | of |
            policy | property | required | rename | scalar | target |
            then | transaction | type | using | value |
            view |
          
            (?# reserved)
          
            aggregate | all | alter | and | commit | create |
            delete | detached | distinct | drop | each | else |
            exists | explain | extending | filter |
            for | function | get | group | if | ilike | in |
            insert | is | like | limit | module | not | offset |
            optional | or | order | over | partition |
            rollback | select | set | start |
            update | union | with
          )\\b
          
        '''
      }
      {
        name: "keyword.operator.edgeschema"
        match: "(?i)\\b(as|import|on|to)\\b"
      }
      {
        name: "constant.language.boolean.true.edgeschema"
        match: "(?i)\\b(true)\\b"
      }
      {
        name: "constant.language.boolean.false.edgeschema"
        match: "(?i)\\b(false)\\b"
      }
    ]
  attributes:
    name: "meta.attribute.edgeschema"
    match: '''
      (?x)
        ^\\s+
          ([[:alpha:]_][[:alnum:]_]*)
            (?=\\s*:=)
      
    '''
    captures:
      "1":
        name: "variable.parameter.attribute.edgeschema"
  operators:
    patterns: [
      {
        name: "keyword.operator.namespace.edgeschema"
        match: "(::)"
      }
      {
        name: "keyword.declaration.edgeschema"
        match: "(->)"
      }
      {
        name: "keyword.declaration.edgeschema"
        match: "(:=)"
      }
    ]
  names:
    patterns: [
      {
        name: "support.function.builtin.edgeschema"
        match: '''
          (?x) \\b(?<!\\.) (
            len |
            array_agg | array_contains | array_enumerate | array_unpack |
            lower |
            re_match | re_match_all | re_test |
            count | sum |
            current_date | current_datetime | current_time |
            random | uuid_generate_v1mc
          )(?=\\s*\\()\\b
          
        '''
      }
      {
        name: "support.function.constraint.builtin.edgeschema"
        match: '''
          (?x) \\b(?<!\\.) (
            constraint | max | enum | expression | min | minexclusive |
            length | minlength | regexp | maxlength | maxexclusive | unique
          )\\b
          
        '''
      }
      {
        name: "support.other.module.builtin.edgeschema"
        match: '''
          (?x) \\b(?<!::|\\.)(
            std | stdattrs | schema
          )\\b
          
        '''
      }
      {
        name: "support.type.builtin.edgeschema"
        match: '''
          (?x) \\b(
            array | map | tuple |
          
            bytes | datetime | uuid | str | json | timedelta | date |
            time | int | float | bool | auto | any
          )\\b
          
        '''
      }
      {
        include: "#quoted-name"
      }
    ]
  "quoted-name":
    name: "string.interpolated.edgeschema"
    match: "(`.*?`)"
  "import-parentheses":
    begin: "(?i)(?<=import)\\s*(\\()"
    end: "(\\))"
    beginCaptures:
      "1":
        name: "punctuation.parenthesis.begin.edgeschema"
    endCaptures:
      "1":
        name: "punctuation.parenthesis.end.edgeschema"
    patterns: [
      {
        include: "#comments"
      }
      {
        include: "#keywords"
      }
      {
        include: "#names"
      }
    ]
  "eql-parentheses":
    begin: "(\\()"
    end: "(\\))"
    beginCaptures:
      "1":
        name: "punctuation.parenthesis.begin.edgeschema"
    endCaptures:
      "1":
        name: "punctuation.parenthesis.end.edgeschema"
    patterns: [
      {
        include: "source.edgeql"
      }
    ]
  "eql-to-logical-eol":
    patterns: [
      {
        begin: "(?i)(?<=->|to|extending)\\s*(?!\\()"
        end: "(?=$)|(?<!:)(?=:(?!:))"
        patterns: [
          {
            include: "source.edgeql"
          }
        ]
      }
      {
        begin: "(?<=:=)\\s*(?=\\S.*$)"
        end: "(\\s*$\\n)"
        patterns: [
          {
            include: "source.edgeql"
          }
        ]
      }
      {
        begin: "(?<=:=)\\s*$\\n"
        end: "(\\s*$\\n)"
        patterns: [
          {
            include: "source.edgeql"
          }
        ]
      }
    ]
