# AUTOGENERATED FROM grammars/EdgeSchema.syntax.yaml
name: "EdgeQLSchema"
scopeName: "source.edgeqlschema"
fileTypes: [
  "edges"
  "edgeschema"
  "eschema"
]
uuid: "a560aad6-9c13-49c5-a369-5fb272c8ec1a"
patterns: [
  {
    include: "#all"
  }
]
repository:
  all:
    patterns: [
      {
        include: "#comments"
      }
      {
        include: "#keywords"
      }
      {
        include: "#mappings"
      }
      {
        include: "#operators"
      }
      {
        include: "#names"
      }
      {
        include: "#values"
      }
      {
        include: "#eql"
      }
    ]
  comments:
    patterns: [
      {
        name: "comment.line.note.edgeqlschema"
        match: "(#)\\s*(BUG|FIXME|TODO|XXX).*$\\n?"
        captures:
          "1":
            name: "punctuation.definition.comment.edgeqlschema"
          "2":
            name: "comment.line.note.notation.edgeqlschema"
      }
      {
        name: "comment.line.number-sign.edgeqlschema"
        match: "(#).*$\\n?"
        captures:
          "1":
            name: "punctuation.definition.comment.edgeqlschema"
      }
    ]
  keywords:
    patterns: [
      {
        name: "support.type.abstract.edgeqlschema"
        match: "\\b(abstract|final)\\b"
      }
      {
        name: "support.type.required.edgeqlschema"
        match: "\\b(required)\\b"
      }
      {
        name: "keyword.other.declaration.edgeqlschema"
        match: '''
          (?x) \\b(
            concept | link | atom | constraint | action |
            event | policy | extends | linkproperty
          )\\b
          
        '''
      }
      {
        name: "keyword.operator.edgeqlschema"
        match: "\\b(to|on|for)\\b"
      }
      {
        name: "constant.language.boolean.true.edgeqlschema"
        match: "\\b(true|True|Yes|yes)\\b"
      }
      {
        name: "support.other.edgeqlschema"
        match: "\\b(self|source|target|yes)\\b"
      }
      {
        name: "constant.language.boolean.false.edgeqlschema"
        match: "\\b(false|False|No|no)\\b"
      }
    ]
  mappings:
    name: "variable.parameter.mapping.edgeqlschema"
    match: "\\b(readonly|default|mapping|actions|title)(?=\\s*:)"
  operators:
    name: "keyword.operator.edgeqlschema"
    match: "(:(?!=))"
  names:
    patterns: [
      {
        name: "support.type.builtin.edgeqlschema"
        match: "\\b(builtins|int|str|datetime)\\b"
      }
    ]
  values:
    patterns: [
      {
        name: "constant.language.mapping.edgeqlschema"
        match: "(11|1\\*|\\*1|\\*\\*)"
      }
      {
        include: "#number"
      }
      {
        include: "#eql-string-oneline"
      }
      {
        include: "#eql-string"
      }
    ]
  number:
    name: "constant.numeric.edgeqlschema"
    patterns: [
      {
        include: "#number-dec"
      }
    ]
  "number-dec":
    name: "constant.numeric.dec.edgeqlschema"
    match: '''
      (?x)
          (?:
            #decimal part
            \\.(_*)(?:[0-9](?:[0-9_]*[0-9])?)
            |
            # integer part
            \\b(?:[1-9](?:[0-9_]*[0-9])?|0)
              (?:\\.(_*)[0-9](?:[0-9_]*[0-9])?)?
          )
          ((_*)([eE][\\+\\-]?)(_*)[0-9](?:[0-9_]*[0-9])?)?
      
        (_*)
        \\b
      
    '''
    captures:
      "1":
        name: "invalid.illegal.dec.edgeqlschema"
      "2":
        name: "invalid.illegal.dec.edgeqlschema"
      "4":
        name: "invalid.illegal.dec.edgeqlschema"
      "5":
        name: "storage.type.number.edgeqlschema"
      "6":
        name: "invalid.illegal.dec.edgeqlschema"
      "7":
        name: "invalid.illegal.dec.edgeqlschema"
  "eql-string-oneline":
    name: "meta.raw.oneline.edgeqlschema"
    begin: "(:=)\\s*(?=\\S)"
    end: "$"
    beginCaptures:
      "1":
        name: "keyword.operator.edgeqlschema"
    patterns: [
      {
        include: "source.sql"
      }
    ]
  "eql-string":
    begin: "(:=)"
    end: "(?<!,)(\\s*$)"
    beginCaptures:
      "1":
        name: "keyword.operator.edgeqlschema"
    patterns: [
      {
        include: "source.sql"
      }
    ]
  eql:
    begin: "(?=SELECT)"
    end: "(^\\s*$)"
    beginCaptures:
      "1":
        name: "keyword.operator.edgeqlschema"
    patterns: [
      {
        include: "source.sql"
      }
    ]